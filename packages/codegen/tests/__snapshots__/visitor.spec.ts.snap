// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`Codegen Angular should codegen 1`] = `
{
  "content": "
export const BOOKS_QUERY = gql\`
    query Books {
  books {
    id
  }
}
    \` as DocumentNode<BooksQuery, BooksQueryVariables>;

export function gqlBooksQuery(): { query: typeof BOOKS_QUERY } {
  return {
    query: BOOKS_QUERY
  };
}

export const BOOK_QUERY = gql\`
    query Book($id: ID!) {
  book(id: $id) {
    id
  }
}
    \` as DocumentNode<BookQuery, BookQueryVariables>;

export function gqlBookQuery(variables: BookQueryVariables): { query: typeof BOOK_QUERY, variables: typeof variables };
export function gqlBookQuery(variables: () => BookQueryVariables): { query: typeof BOOK_QUERY, variables: typeof variables };
export function gqlBookQuery(variables: any): any {
  return {
    query: BOOK_QUERY,
    variables
  };
}

export const ADD_BOOK_MUTATION = gql\`
    mutation AddBook($book: BookInput!) {
  addBook(book: $book) {
    id
  }
}
    \` as DocumentNode<AddBookMutation, AddBookMutationVariables>;

export function gqlAddBookMutation(variables: AddBookMutationVariables): { mutation: typeof ADD_BOOK_MUTATION, variables: typeof variables } {
  return {
    mutation: ADD_BOOK_MUTATION,
    variables
  };
}

export const NEW_BOOK_SUBSCRIPTION = gql\`
    subscription NewBook {
  newBook {
    id
  }
}
    \` as DocumentNode<NewBookSubscription, NewBookSubscriptionVariables>;

export function gqlNewBookSubscription(): { subscription: typeof NEW_BOOK_SUBSCRIPTION } {
  return {
    subscription: NEW_BOOK_SUBSCRIPTION
  };
}
",
  "prepend": [
    "import { gql } from '@apollo-orbit/angular';",
    "import { TypedDocumentNode as DocumentNode } from '@apollo-orbit/angular';",
  ],
}
`;

exports[`Codegen Core should codegen 1`] = `
{
  "content": "
export const BOOKS_QUERY = gql\`
    query Books {
  books {
    id
  }
}
    \` as DocumentNode<BooksQuery, BooksQueryVariables>;
export const BOOK_QUERY = gql\`
    query Book($id: ID!) {
  book(id: $id) {
    id
  }
}
    \` as DocumentNode<BookQuery, BookQueryVariables>;
export const ADD_BOOK_MUTATION = gql\`
    mutation AddBook($book: BookInput!) {
  addBook(book: $book) {
    id
  }
}
    \` as DocumentNode<AddBookMutation, AddBookMutationVariables>;
export const NEW_BOOK_SUBSCRIPTION = gql\`
    subscription NewBook {
  newBook {
    id
  }
}
    \` as DocumentNode<NewBookSubscription, NewBookSubscriptionVariables>;",
  "prepend": [
    "import { gql } from '@apollo/client';",
    "import { TypedDocumentNode as DocumentNode } from '@apollo/client';",
  ],
}
`;
